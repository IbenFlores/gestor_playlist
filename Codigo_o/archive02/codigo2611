import pandas as pd
import re
import random

def conocer_cancion_nueva(df, reproductor_personal):
    """
    Selecciona una canci√≥n al azar del DataFrame, muestra informaci√≥n al usuario,
    y permite decidir si guardarla en el reproductor personal.
    """
    while True:
        # Elegir una canci√≥n al azar
        cancion_aleatoria = df.sample(1).iloc[0]  # Selecciona una fila aleatoria del DataFrame
        
        # Mostrar informaci√≥n de la canci√≥n
        print("\nüéµ ¬°Conoce una nueva canci√≥n! üé∂")
        print(f"Artista: {cancion_aleatoria['artist_name']}")
        print(f"Canci√≥n: {cancion_aleatoria['track_name']}")
        print(f"G√©nero: {cancion_aleatoria['genre']}")
        
        # Opciones del usuario
        print("\n¬øQu√© deseas hacer con esta canci√≥n?")
        print("1. Guardar en mi reproductor personal")
        print("2. Escuchar otra canci√≥n aleatoria")
        print("3. Volver al men√∫ principal")
        
        opcion = input("Selecciona una opci√≥n (1-3): ").strip()
        
        if opcion == '1':
            # Guardar canci√≥n en el reproductor personal
            reproductor_personal.append({
                'artist_name': cancion_aleatoria['artist_name'],
                'track_name': cancion_aleatoria['track_name'],
                'genre': cancion_aleatoria['genre']
            })
            print(f"‚úÖ Canci√≥n '{cancion_aleatoria['track_name']}' de '{cancion_aleatoria['artist_name']}' guardada en tu reproductor personal.")
            break  # Salimos despu√©s de guardar
        elif opcion == '2':
            print("\nBuscando otra canci√≥n aleatoria... üé∂")
            continue  # Selecciona otra canci√≥n
        elif opcion == '3':
            print("Volviendo al men√∫ principal.")
            break  # Salimos al men√∫ principal
        else:
            print("Opci√≥n no v√°lida. Por favor, selecciona una opci√≥n v√°lida (1-3).")

# Ruta del archivo CSV
file_path = "spotify_data.csv"

try:
    df = pd.read_csv(
        file_path,
        quotechar='"',
        skipinitialspace=True,
        on_bad_lines='skip',
        encoding='utf-8'
    )
    print("Archivo CSV cargado con √©xito.")
except FileNotFoundError:
    print("Error: El archivo CSV no se encontr√≥. Aseg√∫rate de que el archivo est√© en la ubicaci√≥n correcta.")
    df = None  # Evitamos errores si el archivo no se carga

# Lista para el reproductor personal
reproductor_personal = []

def limpiar_titulo(titulo):
    """
    Limpia los t√≠tulos de canciones, conservando solo el texto relevante (hasta el √∫ltimo guion).
    """
    if not isinstance(titulo, str):
        return ""
    return re.sub(r' - [^,]+,.*', '', titulo).strip()

def buscar_canciones_por_artista(df):
    """
    Permite buscar canciones por el nombre del artista y guardar canciones en el reproductor personal.
    """
    while True:
        artista = input("\nIngresa el nombre del artista (o escribe 'salir' para terminar): ").strip()
        if artista.lower() == 'salir':
            print("Volviendo al men√∫ principal.")
            break
        
        # Filtrar canciones por el nombre del artista
        canciones = df[df['artist_name'].str.contains(artista, case=False, na=False)][['artist_name', 'track_name', 'genre']]
        
        if not canciones.empty:
            print(f"\nCanciones de '{artista}':")
            
            # Mostrar canciones bien alineadas
            print(canciones.reset_index(drop=True).to_string(index=True, header=True))
            
            # Solicitar guardar canciones
            seleccion = input("\nIngresa el n√∫mero de la canci√≥n para guardar en tu reproductor (o escribe 'salir' para regresar): ").strip()
            if seleccion.lower() == 'salir':
                continue
            elif seleccion.isdigit() and 0 <= int(seleccion) < len(canciones):
                cancion = canciones.iloc[int(seleccion)]
                
                # Agregar canci√≥n al reproductor personal con g√©nero incluido
                reproductor_personal.append({
                    'artist_name': cancion['artist_name'],
                    'track_name': cancion['track_name'],
                    'genre': cancion['genre']
                })
                print(f"Canci√≥n '{cancion['track_name']}' de '{cancion['artist_name']}' (G√©nero: {cancion['genre']}) guardada en tu reproductor personal.")
            else:
                print("Selecci√≥n inv√°lida. Intenta de nuevo.")
        else:
            print(f"\nNo se encontraron canciones para el artista '{artista}'.")

def mostrar_todas_las_canciones(df):
    """
    Muestra todas las canciones y artistas disponibles en bloques de 100 filas.
    Permite ordenar los datos por diferentes criterios.
    """
    while True:
        print("\nOpciones de ordenamiento:")
        print("1. Ordenar por nombre del artista")
        print("2. Ordenar por nombre de la canci√≥n")
        
        # Generar din√°micamente las opciones para columnas adicionales
        columnas_adicionales = {
            '3': 'year',
            '4': 'popularity',
            '5': 'danceability',
            '6': 'energy',
            '7': 'key',
            '8': 'loudness',
            '9': 'mode',
            '10': 'speechiness',
            '11': 'acousticness',
            '12': 'instrumentalness',
            '13': 'liveness',
            '14': 'valence',
            '15': 'tempo',
            '16': 'time_signature',
            '17': 'duration_ms'
        }
        
        for clave, columna in columnas_adicionales.items():
            if columna in df.columns:
                print(f"{clave}. Ordenar por {columna}")
        
        print("18. Volver al men√∫ principal")
        opcion_orden = input("Selecciona una opci√≥n: ").strip()
        
        if opcion_orden == '18':
            print("Volviendo al men√∫ principal.")
            break
        elif opcion_orden not in columnas_adicionales.keys() and opcion_orden not in ['1', '2']:
            print("Opci√≥n no v√°lida. Intenta de nuevo.")
            continue
        
        # Elegir la direcci√≥n de ordenamiento
        print("\nOpciones de direcci√≥n:")
        print("1. Ascendente")
        print("2. Descendente")
        direccion = input("Selecciona una direcci√≥n (1-2): ").strip()
        ascendente = direccion == '1'
        
        if direccion not in ['1', '2']:
            print("Direcci√≥n no v√°lida. Intenta de nuevo.")
            continue
        
        # Aplicar el criterio de ordenamiento
        columna_orden = {
            '1': 'artist_name',
            '2': 'track_name',
            **columnas_adicionales
        }[opcion_orden]
        
        df_sorted = df.sort_values(by=columna_orden, ascending=ascendente)
        
        # Dividir los datos en bloques de 100 filas
        num_filas = 100
        total_filas = len(df_sorted)
        total_bloques = (total_filas // num_filas) + (1 if total_filas % num_filas != 0 else 0)
        
        while True:
            print(f"\nTotal de bloques disponibles: {total_bloques}")
            print("Introduce el n√∫mero del bloque que deseas ver (o escribe 'salir' para regresar):")
            bloque = input(f"Selecciona un bloque (1-{total_bloques}): ").strip()
            
            if bloque.lower() == 'salir':
                print("Saliendo del modo de visualizaci√≥n.")
                break
            elif not bloque.isdigit() or int(bloque) < 1 or int(bloque) > total_bloques:
                print(f"Opci√≥n no v√°lida. Introduce un n√∫mero entre 1 y {total_bloques}.")
                continue
            
            # Mostrar el bloque seleccionado
            bloque = int(bloque)
            inicio = (bloque - 1) * num_filas
            fin = min(inicio + num_filas, total_filas)
            print(f"\nMostrando bloque {bloque} (filas {inicio + 1}-{fin}):")
            
            # Mostrar solo las columnas relevantes: criterio de orden, artista y canci√≥n
            print(df_sorted.iloc[inicio:fin][[columna_orden, 'artist_name', 'track_name']].to_string(index=False))

def gestionar_reproductor_personal():
    """
    Permite al usuario ver, ordenar, escuchar, agregar o eliminar canciones de su reproductor personal.
    """
    while True:
        print("\nGesti√≥n de reproductor personal:")
        print("1. Ver canciones guardadas")
        print("2. Ordenar canciones guardadas")
        print("3. Eliminar una canci√≥n")
        print("4. Reproducir canci√≥n aleatoria")  # Nueva opci√≥n
        print("5. Volver al men√∫ principal")
        
        opcion = input("Selecciona una opci√≥n: ").strip()
        
        if opcion == '1':
            if reproductor_personal:
                print("\nCanciones en tu reproductor personal:")
                for idx, cancion in enumerate(reproductor_personal, start=1):
                    print(f"{idx}. {cancion['artist_name']} - {cancion['track_name']} (G√©nero: {cancion['genre']})")
                
                # Preguntar si se quiere escuchar una canci√≥n
                while True:
                    seleccion = input("\nIngresa el n√∫mero de la canci√≥n que deseas escuchar (o escribe 'salir' para regresar): ").strip()
                    if seleccion.lower() == 'salir':
                        break
                    elif seleccion.isdigit() and 1 <= int(seleccion) <= len(reproductor_personal):
                        cancion_a_reproducir = reproductor_personal[int(seleccion) - 1]
                        print(f"\nüéµ Reproduciendo: '{cancion_a_reproducir['track_name']}' de '{cancion_a_reproducir['artist_name']}' (G√©nero: {cancion_a_reproducir['genre']}) üé∂")
                    else:
                        print("Selecci√≥n inv√°lida. Por favor, elige un n√∫mero v√°lido o escribe 'salir'.")
            else:
                print("\nTu reproductor personal est√° vac√≠o.")
        
        elif opcion == '2':
            if reproductor_personal:
                print("\nOpciones para ordenar canciones:")
                print("1. Ordenar por g√©nero")
                print("2. Ordenar por nombre de la canci√≥n")
                print("3. Ordenar por artista")
                print("4. Cancelar y volver")
                
                criterio = input("Selecciona un criterio de ordenamiento: ").strip()
                
                if criterio == '1':
                    reproductor_personal.sort(key=lambda x: x['genre'])
                    print("\nCanciones ordenadas por g√©nero.")
                elif criterio == '2':
                    reproductor_personal.sort(key=lambda x: x['track_name'])
                    print("\nCanciones ordenadas por nombre.")
                elif criterio == '3':
                    reproductor_personal.sort(key=lambda x: x['artist_name'])
                    print("\nCanciones ordenadas por artista.")
                elif criterio == '4':
                    print("Cancelando ordenamiento.")
                else:
                    print("Opci√≥n no v√°lida. Intenta de nuevo.")
            else:
                print("\nTu reproductor personal est√° vac√≠o, no hay canciones para ordenar.")
        
        elif opcion == '3':
            if not reproductor_personal:
                print("\nTu reproductor personal est√° vac√≠o.")
                continue
            
            print("\nCanciones en tu reproductor personal:")
            for idx, cancion in enumerate(reproductor_personal, start=1):
                print(f"{idx}. {cancion['artist_name']} - {cancion['track_name']} (G√©nero: {cancion['genre']})")
            
            seleccion = input("\nIngresa el n√∫mero de la canci√≥n que deseas eliminar (o escribe 'salir' para regresar): ").strip()
            if seleccion.lower() == 'salir':
                continue
            elif seleccion.isdigit() and 1 <= int(seleccion) <= len(reproductor_personal):
                cancion_eliminada = reproductor_personal.pop(int(seleccion) - 1)
                print(f"\nCanci√≥n '{cancion_eliminada['track_name']}' de '{cancion_eliminada['artist_name']}' eliminada de tu reproductor personal.")
            else:
                print("Selecci√≥n inv√°lida. Intenta de nuevo.")

        elif opcion == '4':
            if reproductor_personal:
                import random  # Importamos el m√≥dulo para generar aleatoriedad
                random.shuffle(reproductor_personal)  # Reorganizamos la lista de forma aleatoria
                
                # Reproducir la primera canci√≥n de la lista aleatoria
                primera_cancion = reproductor_personal[0]
                print("\nüîÄ ¬°Tu playlist ha sido mezclada de forma aleatoria! üé∂")
                print(f"üéµ Reproduciendo: '{primera_cancion['track_name']}' de '{primera_cancion['artist_name']}' (G√©nero: {primera_cancion['genre']}) üé∂")
            else:
                print("\nTu reproductor personal est√° vac√≠o. Agrega canciones primero.")
        
        elif opcion == '5':
            print("Volviendo al men√∫ principal.")
            break
        
        else:
            print("Opci√≥n no v√°lida. Intenta de nuevo.")

try:
    # Leer el archivo CSV ignorando l√≠neas mal formateadas
    df = pd.read_csv(
        file_path,
        quotechar='"',
        skipinitialspace=True,
        on_bad_lines='skip',
        encoding='utf-8'
    )

    # Verificar si las columnas necesarias existen
    if 'artist_name' in df.columns and 'track_name' in df.columns:
        df['artist_name'] = df['artist_name'].astype(str).str.strip()
        df['track_name'] = df['track_name'].apply(limpiar_titulo)

        while True:
            print("\nMen√∫ de opciones:")
            print("1. Buscar canciones por artista")
            print("2. Mostrar todas las canciones")
            print("3. Gestionar reproductor personal")
            print("4. Conocer canci√≥n nueva")  # Nueva opci√≥n
            print("5. Salir")
            
            opcion = input("Selecciona una opci√≥n (1-5): ").strip()
            
            if opcion == '1':
                buscar_canciones_por_artista(df)
            elif opcion == '2':
                mostrar_todas_las_canciones(df)
            elif opcion == '3':
                gestionar_reproductor_personal()
            elif opcion == '4':
                conocer_cancion_nueva(df, reproductor_personal)
            elif opcion == '5':
                print("Saliendo del programa. ¬°Hasta luego!")
                break
            else:
                print("Opci√≥n no v√°lida. Por favor, selecciona una opci√≥n v√°lida (1-5).")
    else:
        print("El archivo no contiene las columnas 'artist_name' o 'track_name'. Verifica el formato del archivo.")

except FileNotFoundError:
    print("El archivo no se encontr√≥. Aseg√∫rate de que el archivo est√© en la ubicaci√≥n correcta.")
except Exception as e:
    print(f"Ocurri√≥ un error al leer el archivo: {e}")
